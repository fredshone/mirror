[project]
name = "mirror"
description = "population generation using variation auto-encoders"
readme = "README.md"
requires-python = ">=3.12"
classifiers = [
        "Development Status :: 2 - Pre-Alpha",
        "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License",
        "Natural Language :: English",
        "Programming Language :: Python :: 3",
    ]

authors = [
    { name = "Fred Shone", email = "26383933+fredshone@users.noreply.github.com" },
]
keywords = ["synthetic census", "synthetic population", "generation", "vae"]
license = { text = "MIT" }
dynamic = ["dependencies", "optional-dependencies", "version"]

[project.scripts]
mirror="mirror.cli:cli"

[project.urls]
repository = "https://github.com/fredshone/mirror"

[tool.setuptools.dynamic]
dependencies = { file = ["requirements/base.txt"] }
version = { attr = "mirror.__version__" }

[[tool.uv.index]]
name = "pytorch-cu128"
url = "https://download.pytorch.org/whl/cu128"
explicit = true

[tool.uv.sources]
torch = [
  { index = "pytorch-cu128", marker = "sys_platform == 'linux' or sys_platform == 'win32'" },
]
torchvision = [
  { index = "pytorch-cu128", marker = "sys_platform == 'linux' or sys_platform == 'win32'" },
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-rav --strict-markers -n2 --nbmake --nbmake-kernel=mirror --cov --cov-report=xml --cov-config=pyproject.toml -m 'not high_mem' -p no:memray"
testpaths = ["tests", "examples", "integration_tests"]
# to mark a test, decorate it with `@pytest.mark.[marker-name]`
markers = ["high_mem", "limit_memory"]
filterwarnings = [
    # https://github.com/pytest-dev/pytest-xdist/issues/825
    "ignore:The --rsyncdir command line argument and rsyncdirs config variable are deprecated.:DeprecationWarning",
]

[tool.coverage.run]
branch = true
source = ["src/"]

[tool.coverage.report]
fail_under = 50

[tool.coverage.html]
directory = "reports/coverage"

[tool.coverage.xml]
output = "reports/coverage/coverage.xml"

[tool.black]
line-length = 80
skip_magic_trailing_comma = true

[tool.ruff]
line-length = 80
lint.select = ["E", "F", "I", "Q"]
lint.ignore = [
    "E501", # line too long: Black will handle this.
    "D1",   # Ignore missing docstrings in public functions/modules. There are just too many of them missing...
]

# Exclude a variety of commonly ignored directories.
exclude = [".*", "__pypackages__", "build", "dist", "venv", "reports/"]

# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

# Ignore `E402` (import violations) and `F401` (unused imports) in all `__init__.py` files
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "F401"]
"*.ipynb" = ["E402"]

# Ignore `E402` for all notebooks
[tool.nbqa.addopts]
ruff = ["--extend-ignore=E402"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.setuptools.packages.find]
where = ["src"]
include = ["mirror*"]

[tool.setuptools.package-data]
# Add file globs from the source code directory if they include non-py files that should be packaged
# E.g. "fixtures/**/*"
mirror = []


[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"



[tool.setuptools.dynamic.optional-dependencies]
dev = { file = ["requirements/dev.txt"] }


